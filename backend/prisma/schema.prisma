generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  productName String
  imgUrl      String?
  price       Decimal
  shortDesc   String?
  description String?

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  avgRating  Float       @default(0)
  reviews    Review[]
  orderItems OrderItem[] // Quan hệ ngược với OrderItem
  wishlists  Wishlist[] // Quan hệ ngược với Wishlist

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("products")
}

model Review {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  userName  String
  rating    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  phone    String?
  address  String?
  avatar   String?
  role     String  @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders   Order[]
  wishlist Wishlist[]
  reviews  Review[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int
  price    Float
}

model Wishlist {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}
